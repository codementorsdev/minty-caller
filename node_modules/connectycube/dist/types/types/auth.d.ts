import { DateOrTimestamp, EmptyParams } from './common';
import { ConnectyCubeUsers } from './users';
export declare namespace ConnectyCubeAuth {
    type Session = {
        id: number;
        user_id: number;
        application_id: number;
        token: string;
        ts: DateOrTimestamp;
        created_at: DateOrTimestamp;
        updated_at: DateOrTimestamp;
        user?: ConnectyCubeUsers.User | null;
    };
    type LoginByLogin = {
        login: string;
        password: string;
    };
    type LoginByEmail = {
        email: string;
        password: string;
    };
    type LoginByGuest = {
        guest: '1';
        full_name: string;
    };
    type LoginByFacebook = {
        provider: 'facebook';
        keys: {
            token: string;
            secret: string;
        };
    };
    type LoginByTwitter = {
        provider: 'twitter';
        keys: {
            token: string;
            secret: string;
        };
    };
    type LoginByFirebasePhone = {
        provider: 'firebase_phone';
        firebase_phone: {
            project_id: string | number;
            access_token: string;
        };
    };
    type LoginByFirebaseEmail = {
        provider: 'firebase_email';
        firebase_email: {
            project_id: string | number;
            access_token: string;
        };
    };
    type LoginParams = LoginByLogin | LoginByEmail | LoginByGuest | LoginByFacebook | LoginByTwitter | LoginByFirebasePhone | LoginByFirebaseEmail;
    type GeneratedSessionParams = (LoginParams | EmptyParams) & {
        application_id: string;
        auth_key: string;
    };
    type LoginRawResponse = {
        user: ConnectyCubeUsers.User;
        [key: string]: any;
    };
    type GetSessionRawResponse = {
        session: Session;
        [key: string]: any;
    };
}
//# sourceMappingURL=auth.d.ts.map
import { DateOrTimestamp, SearchCondition } from './common';
export declare namespace ConnectyCubeUsers {
    type User = {
        id: number;
        full_name: string | null;
        email: string | null;
        login: string | null;
        phone: string | null;
        website: string | null;
        created_at: DateOrTimestamp;
        updated_at: DateOrTimestamp;
        last_request_at: DateOrTimestamp;
        external_user_id: string | number | null;
        facebook_id: string | number | null;
        twitter_id: string | number | null;
        custom_data: string | null;
        blob_id: number | null;
        avatar: string | null;
        user_tags: string[] | null;
        timezone: number | null;
        is_guest?: boolean;
    };
    type UserFields = {
        login?: string;
        email?: string;
        full_name?: string;
        phone?: string;
        avatar?: string;
        blob_id?: number;
        website?: string;
        custom_data?: string;
        external_user_id?: string | number;
        facebook_id?: string | number;
        twitter_id?: string | number;
        tag_list?: string[];
        timezone?: number;
    };
    type FieldsToSignUp = UserFields & {
        external_id?: string | number;
    };
    type FieldsToUpdate = UserFields & {
        password?: string;
        old_password?: string;
    };
    type SignUpByLoginParams = {
        login: string;
        password: string;
    };
    type SignUpByEmailParams = {
        email: string;
        password: string;
    };
    type GetV2Params = {
        offset?: number;
        limit?: number;
        sort_asc?: keyof User;
        sort_desc?: keyof User;
        id?: SearchCondition<number>;
        login?: SearchCondition<string>;
        email?: SearchCondition<string>;
        full_name?: SearchCondition<string>;
        phone?: SearchCondition<string>;
        external_id?: SearchCondition<string>;
        facebook_id?: SearchCondition<string>;
        twitter_id?: SearchCondition<string>;
        user_tags?: SearchCondition<string>;
        last_request_at?: SearchCondition<DateOrTimestamp>;
        created_at?: SearchCondition<DateOrTimestamp>;
        updated_at?: SearchCondition<DateOrTimestamp>;
    };
    type SignUpParams = (SignUpByLoginParams | SignUpByEmailParams) & Partial<FieldsToSignUp>;
    type UpdateParams = FieldsToUpdate;
    type GetV2Response = {
        limit: number;
        skip: number;
        total_entries: number;
        items: User[];
    };
    type UserResponse = {
        user: User;
    };
    type OldGetResponse = {
        current_page: number;
        per_page: number;
        total_entries: number;
        items: User[];
    };
}
//# sourceMappingURL=users.d.ts.map
import { formDataImpl } from './platform';
import { ProxyMethod, ProxyType } from './types/proxy';
import { Proxy } from './types';
export default class ProxyService {
    sdkInstance: Proxy.SDKInstance;
    requestsNumber: number;
    fetchImpl: any;
    private currentUserId;
    private abortControllersMap;
    requestMethod: typeof ProxyMethod;
    responseType: typeof ProxyType;
    setSession(session: Proxy.SDKInstance['session']): void;
    getSession(): Proxy.SDKInstance['session'];
    setCurrentUserId(userId?: number | null): void;
    getCurrentUserId(): number | undefined;
    logRequest(params: Proxy.Params, requestId: number): void;
    logResponse(response: any, requestId: number): void;
    buildRequestAndURL(params: Proxy.Params): [any, string];
    buildRequestBody(params: Proxy.Params, isMultipartFormData: boolean, isPostOrPutType: boolean): typeof formDataImpl | string | any;
    serializeQueryParams(obj: any, prefix: string, useArrayQuery: any, level?: number): string;
    encodeURIComponent(uriComponent: string | number | boolean): string;
    abortRequest(abortId: string | number): void;
    processSuccessfulOrFailedRequest(abort_id?: string | number): void;
    ajax<T>(params: Proxy.Params): Promise<T>;
    processAjaxResponse(body: any, resolve: (value: any) => void, requestId: number): void;
    processAjaxError(response: Response | null, body: any, error: any, reject: (reason?: any) => void, resolve: (value: any) => void, params: Proxy.Params, requestId: number): void;
    handleExpiredSessionResponse(error: any, response: any, reject: (reason?: any) => void, resolve: (value: any) => void, params: Proxy.Params): void;
    private isExpiredSessionError;
}
//# sourceMappingURL=Proxy.d.ts.map
import WebRTCSession from './WebRTCSession';
import { PeerConnectionState } from '../types/calls';
import { Calls } from '../types';
export default class WebRTCPeerConnection {
    original: RTCPeerConnection;
    session: WebRTCSession;
    userID: number;
    type: RTCSdpType;
    remoteSDP: string | null;
    state: PeerConnectionState;
    iceCandidates: RTCIceCandidateInit[];
    remoteStream: MediaStream;
    answerTimeInterval: number;
    onStatusClosedChecker: NodeJS.Timeout | null;
    dialingTimer: NodeJS.Timeout | null;
    statsReportTimer: NodeJS.Timeout | null;
    waitingReconnectTimeoutCallback: NodeJS.Timeout | null;
    released: boolean;
    constructor(session: WebRTCSession, userID: number, type: RTCSdpType);
    private create;
    private setup;
    private onMediaTrackHandler;
    private onIceCandidateHandler;
    private onSignalingStateHandler;
    /** handler of remote media stream */
    private onIceConnectionStateHandler;
    private clearWaitingReconnectTimer;
    private startWaitingReconnectTimer;
    private clearStatsReportTimer;
    addCandidates(iceCandidates: RTCIceCandidateInit[]): Promise<void[]>;
    release(): void;
    clearDialingTimer(): void;
    getAndSetLocalSessionDescription(maxBandwidth: number, iceRestart?: boolean): Promise<RTCSessionDescriptionInit>;
    setRTCRtpSenderMaxBandwidth(maxBandwidth: number): Promise<any>;
    startDialingTimer(extension: Calls.ExtensionParams, withOnNotAnswerCallback: boolean): void;
    setRemoteSessionDescription(type: RTCSdpType, sdp: string): Promise<void>;
    private getWrappedStats;
    set sdpRemote(sdp: string);
    get sdpRemote(): string | null;
    toString(): string;
    private getStatsCustom;
    private getBitratePerSecond;
    private getFramesPerSecond;
    getSenders(): RTCRtpSender[];
    createOffer(options?: RTCOfferOptions | any): Promise<RTCSessionDescriptionInit>;
    createAnswer(options?: RTCOfferOptions | any): Promise<RTCSessionDescriptionInit>;
    setRemoteDescription(description: RTCSessionDescriptionInit | any): Promise<void>;
    setLocalDescription(description: RTCSessionDescriptionInit | any): Promise<void>;
    getStats(): Promise<RTCStatsReport>;
    close(): void;
    addIceCandidate(candidate: RTCIceCandidateInit | any): Promise<void>;
    addTrack(track: MediaStreamTrack, stream: MediaStream): RTCRtpSender | any;
    get localDescription(): RTCSessionDescription | {
        type: string;
        sdp: any;
    };
    get signalingState(): RTCSignalingState | any;
    get iceConnectionState(): RTCIceConnectionState | any;
}
//# sourceMappingURL=WebRTCPeerConnection.d.ts.map
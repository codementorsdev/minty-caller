import { DateOrTimestamp, SearchCondition } from './common';

export namespace ConnectyCubeUsers {
  export type User = {
    id: number;
    full_name: string | null;
    email: string | null;
    login: string | null;
    phone: string | null;
    website: string | null;
    created_at: DateOrTimestamp;
    updated_at: DateOrTimestamp;
    last_request_at: DateOrTimestamp;
    external_user_id: string | number | null;
    facebook_id: string | number | null;
    twitter_id: string | number | null;
    custom_data: string | null;
    blob_id: number | null;
    avatar: string | null;
    user_tags: string[] | null;
    timezone: number | null; // Minutes UTC offset (e.g. 180 is +2 hours)
    is_guest?: boolean;
  };
  export type UserFields = {
    login?: string;
    email?: string;
    full_name?: string;
    phone?: string;
    avatar?: string;
    blob_id?: number;
    website?: string;
    custom_data?: string;
    external_user_id?: string | number;
    facebook_id?: string | number;
    twitter_id?: string | number;
    tag_list?: string[];
    timezone?: number;
  };
  export type FieldsToSignUp = UserFields & { external_id?: string | number };
  export type FieldsToUpdate = UserFields & { password?: string; old_password?: string };
  export type SignUpByLoginParams = { login: string; password: string };
  export type SignUpByEmailParams = { email: string; password: string };
  // Request parameters type
  export type GetV2Params = {
    offset?: number;
    limit?: number;
    sort_asc?: keyof User;
    sort_desc?: keyof User;
    id?: SearchCondition<number>;
    login?: SearchCondition<string>;
    email?: SearchCondition<string>;
    full_name?: SearchCondition<string>;
    phone?: SearchCondition<string>;
    external_id?: SearchCondition<string>;
    facebook_id?: SearchCondition<string>;
    twitter_id?: SearchCondition<string>;
    user_tags?: SearchCondition<string>;
    last_request_at?: SearchCondition<DateOrTimestamp>;
    created_at?: SearchCondition<DateOrTimestamp>;
    updated_at?: SearchCondition<DateOrTimestamp>;
  };
  export type SignUpParams = (SignUpByLoginParams | SignUpByEmailParams) & Partial<FieldsToSignUp>;
  export type UpdateParams = FieldsToUpdate;
  // Response data types
  export type GetV2Response = {
    limit: number;
    skip: number;
    total_entries: number;
    items: User[];
  };
  export type UserResponse = { user: User };
  export type OldGetResponse = {
    current_page: number;
    per_page: number;
    total_entries: number;
    items: User[];
  };
}
